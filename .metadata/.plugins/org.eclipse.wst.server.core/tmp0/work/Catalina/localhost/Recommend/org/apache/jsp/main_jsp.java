/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.51
 * Generated at: 2020-04-26 07:52:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;
import retrofit2.Call;
import retrofit2.Retrofit;
import project.content.recommend.helper.*;
import project.content.recommend.service.impl.MovieSimilarity;
import project.content.recommend.model.SearchMovieInfo;
import project.content.recommend.model.SearchMovieInfo.MovieInfoResult.MovieInfo.*;
import project.content.recommend.model.SearchMovieList;
import project.content.recommend.model.SearchMovieList.MovieListResult;
import project.content.recommend.model.SearchMovieList.MovieListResult.MovieList;
import project.content.recommend.service.*;

public final class main_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("project.content.recommend.helper");
    _jspx_imports_packages.add("project.content.recommend.model.SearchMovieInfo.MovieInfoResult.MovieInfo");
    _jspx_imports_packages.add("project.content.recommend.service");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("project.content.recommend.service.impl.MovieSimilarity");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("project.content.recommend.model.SearchMovieList");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("project.content.recommend.model.SearchMovieInfo");
    _jspx_imports_classes.add("project.content.recommend.model.SearchMovieList.MovieListResult");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("retrofit2.Call");
    _jspx_imports_classes.add("project.content.recommend.model.SearchMovieList.MovieListResult.MovieList");
    _jspx_imports_classes.add("retrofit2.Retrofit");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


	/** 1) 필요한 객체 생성 부분 */
	// Helper 객체 생성
	WebHelper webHelper = WebHelper.getInstance(request, response);
	RetrofitHelper retrofitHelper = RetrofitHelper.getInstance();
	// Retrofit 객체 생성
	Retrofit retrofit = retrofitHelper.getRetrofit(ApiKobisService.BASE_URL);
	// Service 객체를 생성한다. 구현체는 Retrofit이 자동으로 생성해 준다.
	ApiKobisService apiKobisService = retrofit.create(ApiKobisService.class);

	/** 2) 검색일 파라마터 처리 */
	// 검색할 영화제목
	String movieNm1 = webHelper.getString("movieNm1");
	String movieNm2 = webHelper.getString("movieNm2");
	String movieNm3 = webHelper.getString("movieNm3");

	// 검색어가 없다면 alert창을 띄워준다.
	if (movieNm1 == null || movieNm2 == null || movieNm3 == null) {
		webHelper.redirect(null, "좋아하는 영화 제목을 알려주세요.");
	}

	/** 3) API 연동 */
	// 영화진흥원 OpenAPI를 통해 검색결과 받아오기
	Call<SearchMovieList> call1 = apiKobisService.getSearchMovieList(movieNm1);
	Call<SearchMovieList> call2 = apiKobisService.getSearchMovieList(movieNm2);
	Call<SearchMovieList> call3 = apiKobisService.getSearchMovieList(movieNm3);

	// API 키를 잘못 설정한 경우등의 이유로 연동에 실패 할 수 있기 때문에 예외처리를 준비한다.
	SearchMovieList searchMovieList1 = null;
	SearchMovieList searchMovieList2 = null;
	SearchMovieList searchMovieList3 = null;
	try {
		searchMovieList1 = call1.execute().body();
		searchMovieList2 = call2.execute().body();
		searchMovieList3 = call3.execute().body();
	} catch (Exception e) {
		e.printStackTrace();
	}

	List<MovieList> list1 = null;
	List<MovieList> list2 = null;
	List<MovieList> list3 = null;

	// 검색 결과가 있다면 list만 추출한다.
	if (searchMovieList1 != null) {
		list1 = searchMovieList1.getMovieListResult().getMovieList();
	}
	if (searchMovieList2 != null) {
		list2 = searchMovieList2.getMovieListResult().getMovieList();
	}
	if (searchMovieList3 != null) {
		list3 = searchMovieList3.getMovieListResult().getMovieList();
	}

	/** 4) 관련 영화 검색 */
	int similarity = 0;
	MovieSimilarity movieSimilarity = new MovieSimilarity();

	// 영화의 국적,장르,코드 추출
	String nation1 = "", genre1 = "", name1 = "";
	String nation2 = "", genre2 = "", name2 = "";
	String nation3 = "", genre3 = "", name3 = "";
	int code1 = 0, code2 = 0, code3 = 0;
	for (int i = 0; i < 1; i++) {
		name1 = list1.get(i).getMovieNm();
		code1 = list1.get(i).getMovieCd();
		nation1 = list1.get(i).getRepNationNm();
		genre1 = list1.get(i).getRepGenreNm();
		name2 = list2.get(i).getMovieNm();
		code2 = list2.get(i).getMovieCd();
		nation2 = list2.get(i).getRepNationNm();
		genre2 = list2.get(i).getRepGenreNm();
		name3 = list3.get(i).getMovieNm();
		code3 = list3.get(i).getMovieCd();
		nation3 = list3.get(i).getRepNationNm();
		genre3 = list3.get(i).getRepGenreNm();
	}
	out.println(name1 + " / " + code1 + " / " + nation1 + " / " + genre1);
	out.println(name2 + " / " + code2 + " / " + nation2 + " / " + genre2);
	out.println(name3 + " / " + code3 + " / " + nation3 + " / " + genre3);

	// 장르,감독,배우 리스트 추출
	Call<SearchMovieInfo> callInfo1 = apiKobisService.getSearchMovieInfo(code1);
	Call<SearchMovieInfo> callInfo2 = apiKobisService.getSearchMovieInfo(code2);
	Call<SearchMovieInfo> callInfo3 = apiKobisService.getSearchMovieInfo(code3);
	SearchMovieInfo movieInfo1 = null;
	SearchMovieInfo movieInfo2 = null;
	SearchMovieInfo movieInfo3 = null;
	try {
		movieInfo1 = callInfo1.execute().body();
		movieInfo2 = callInfo2.execute().body();
		movieInfo3 = callInfo3.execute().body();
	} catch (Exception e) {
		e.printStackTrace();
	}

	List<Genres> genres1 = movieInfo1.getMovieInfoResult().getMovieInfo().getGenres();
	List<Directors> directors1 = movieInfo1.getMovieInfoResult().getMovieInfo().getDirectors();
	List<Actors> actors1 = movieInfo1.getMovieInfoResult().getMovieInfo().getActors();
	List<Genres> genres2 = movieInfo2.getMovieInfoResult().getMovieInfo().getGenres();
	List<Directors> directors2 = movieInfo2.getMovieInfoResult().getMovieInfo().getDirectors();
	List<Actors> actors2 = movieInfo2.getMovieInfoResult().getMovieInfo().getActors();
	List<Genres> genres3 = movieInfo3.getMovieInfoResult().getMovieInfo().getGenres();
	List<Directors> directors3 = movieInfo3.getMovieInfoResult().getMovieInfo().getDirectors();
	List<Actors> actors3 = movieInfo3.getMovieInfoResult().getMovieInfo().getActors();

	ArrayList<Genres> orginGenres = movieSimilarity.getSameGenres(genres1, genres2, genres3);
	ArrayList<Directors> orginDirectors = movieSimilarity.getSameDirectors(directors1, directors2, directors3);
	ArrayList<Actors> orginActors = movieSimilarity.getSameActors(actors1, actors2, actors3);

	// 관련점수가 높은 영화들을 저장할 Map
	Map<String, Integer> map = new HashMap<String, Integer>();
	int curPage = 1;
	int itemPerPage = 10;
	for (int i = curPage; i <= 50; i++) {
		Call<SearchMovieList> callList = apiKobisService.getMovieList(i, itemPerPage);
		SearchMovieList checkMovieList = null;
		try {
			checkMovieList = callList.execute().body();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		List<MovieList> movieList = null;

		// 검색 결과가 있다면 list만 추출한다.
		if (checkMovieList != null) {
			movieList = checkMovieList.getMovieListResult().getMovieList();
		}

		for (int j = 0; j < movieList.size(); j++) {
			int compCode = movieList.get(j).getMovieCd();
			String compNation = movieList.get(j).getRepNationNm();
			String compGenre = movieList.get(j).getRepGenreNm();

			Call<SearchMovieInfo> compMovie = apiKobisService.getSearchMovieInfo(compCode);
			SearchMovieInfo compMovieInfo = compMovie.execute().body();
			List<Genres> compGenres = compMovieInfo.getMovieInfoResult().getMovieInfo().getGenres();
			List<Directors> compDirectors = compMovieInfo.getMovieInfoResult().getMovieInfo().getDirectors();
			List<Actors> compActors = compMovieInfo.getMovieInfoResult().getMovieInfo().getActors();

			//if (compNation.equals(nation1)) {
			//	similarity += 10;
			//}

			similarity += 10 * movieSimilarity.compGenres(orginGenres, compGenres);
			similarity += 5 * movieSimilarity.compDirectors(orginDirectors, compDirectors);
			similarity += 5 * movieSimilarity.compActors(orginActors, compActors);

			if (similarity > 0) {
				map.put(movieList.get(j).getMovieNm(), similarity);
			}

			similarity = 0;
		}
	}

	Iterator it = movieSimilarity.sortMap(map).iterator();

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Recommend System</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<!-- 1) 검색폼 구성 -->\r\n");
      out.write("\t<form name=\"form1\" method=\"get\"\r\n");
      out.write("\t\taction=\"");
      out.print(request.getContextPath());
      out.write("/main.jsp\">\r\n");
      out.write("\t\t<label for=\"movieNm1\">영화제목: </label> <input type=\"text\" id=\"movieNm1\"\r\n");
      out.write("\t\t\tname=\"movieNm1\" value=\"");
      out.print(movieNm1);
      out.write("\" /> <label for=\"movieNm2\">영화제목:\r\n");
      out.write("\t\t</label> <input type=\"text\" id=\"movieNm2\" name=\"movieNm2\"\r\n");
      out.write("\t\t\tvalue=\"");
      out.print(movieNm2);
      out.write("\" /> <label for=\"movieNm3\">영화제목: </label><input\r\n");
      out.write("\t\t\ttype=\"text\" id=\"movieNm3\" name=\"movieNm3\" value=\"");
      out.print(movieNm3);
      out.write("\" /> <input\r\n");
      out.write("\t\t\ttype=\"submit\" value=\"검색\" />\r\n");
      out.write("\t</form>\r\n");
      out.write("\r\n");
      out.write("\t<!-- 2) 검색 결과가 존재할 경우 목록을 표 형식으로 출력 -->\r\n");
      out.write("\t");

		if (map != null && map.size() > 0) {
	
      out.write("<hr />\r\n");
      out.write("\t<table border=\"1\">\r\n");
      out.write("\t\t<thead>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>Movie Name</th>\r\n");
      out.write("\t\t\t\t<th>Similarity</th>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</thead>\r\n");
      out.write("\t\t<tbody>\r\n");
      out.write("\t\t\t<!-- map에 담긴 내용을 반복문으로 출력 -->\r\n");
      out.write("\t\t\t");

				while (it.hasNext()) {
						String temp = (String) it.next();
			
      out.write("<tr>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(temp);
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(map.get(temp));
      out.write("</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t");

				}
			
      out.write("</tbody>\r\n");
      out.write("\t</table>\r\n");
      out.write("\t");

		}
	
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
